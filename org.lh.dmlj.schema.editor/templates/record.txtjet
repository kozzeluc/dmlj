<%@ jet package="org.lh.dmlj.schema.editor.template" imports="java.util.* org.lh.dmlj.schema.*" class="RecordTemplate"%>
<%

/*
This template will generate a record's DDL syntax.  Currently these issues 
exist :

- The order in which the "OWNER OF SET" clauses are generated is in most cases  
  the same as the order in the schema compiler's output.
- The order in which the "MEMBER OF SET" clauses are generated is (depending on
  the import tool used to create the schema) in many cases different from the 
  order in the schema compiler's output; this is a schema generation issue, we 
  are just following the model here.
  
See RecordTemplateTest for a JUnit testcase.
*/

SchemaRecord record = (SchemaRecord)argument;
String recordName;
if (record.getName().endsWith("_")) {
	recordName = 
		record.getName().substring(0, record.getName().length() - 1);
} else {
	recordName = record.getName();
}
%>
     ADD
     RECORD NAME IS <%= recordName %>
         SHARE STRUCTURE OF RECORD <%= record.getSynonymName() %> VERSION <%=record.getSynonymVersion()%>
<%
if (record.getBaseName() != null && 
    (!record.getBaseName().equals(record.getSynonymName()) ||
     record.getBaseVersion() != record.getSynonymVersion())) {
%>
*+           SYNONYM OF PRIMARY RECORD <%= record.getBaseName() %> VERSION <%=record.getBaseVersion()%>
<%
}
%>         
         RECORD ID IS <%= record.getId() %>
<%
if (record.getLocationMode() == LocationMode.CALC) {
    StringBuilder keyElements = new StringBuilder();
    keyElements.append("         LOCATION MODE IS CALC USING ( ");
    for (KeyElement keyElement : record.getCalcKey().getElements()) {
        String q = keyElement.getElement().getName();
        if (keyElements.length() + q.length() > 72) {
%>
<%= keyElements.toString() %>
<%
			keyElements = new StringBuilder();
			keyElements.append("               ");        
        }         
        keyElements.append(q);
        keyElements.append(' ');        
    }
    if (keyElements.length() + 1 > 72) {
%>
<%= keyElements.toString() %>
               )
<%		
	} else {
%>
<%= keyElements.toString() %>)
<%        	    
	}
%>
             DUPLICATES ARE <%= record.getCalcKey().getDuplicatesOption().toString().replaceAll("_", " ") %>         
<%             
} else if (record.getLocationMode() == LocationMode.VIA) {
    String setName;
    if (record.getViaSpecification().getSet().getName().endsWith("_")) {
        setName = 
            record.getViaSpecification().getSet().getName().substring(0, record.getViaSpecification().getSet().getName().length() - 1);
    } else {
        setName =  record.getViaSpecification().getSet().getName();
    }
%>
         LOCATION MODE IS VIA <%= setName %> SET
<% 
    if (record.getViaSpecification().getSymbolicDisplacementName() != null) {
         String symbolicName = 
             record.getViaSpecification().getSymbolicDisplacementName();
%>
             DISPLACEMENT USING <%= symbolicName %>
<%             
    } else if (record.getViaSpecification().getDisplacementPageCount() != null) {
         short pages = 
             record.getViaSpecification().getDisplacementPageCount().shortValue();
%>
             DISPLACEMENT <%= pages %> PAGES
<%             
    }
} else {
%>
         LOCATION MODE IS DIRECT
<%
}
if (record.getMinimumRootLength() != null) {
%>
         MINIMUM ROOT LENGTH IS <%= record.getMinimumRootLength() %> CHARACTERS         
<%
}
if (record.getMinimumFragmentLength() != null) {
%>
         MINIMUM FRAGMENT LENGTH IS <%= record.getMinimumFragmentLength() %> CHARACTERS         
<%
}
for (RecordProcedureCallSpecification procedureCall : record.getProcedures()) {
%>
         CALL <%= procedureCall.getProcedure().getName() %> <%= procedureCall.getCallTime().toString() %> <%= procedureCall.getVerb().toString() %>
<%	
}
String areaName = record.getAreaSpecification().getArea().getName();
String symbolicSubareaName = 
    record.getAreaSpecification().getSymbolicSubareaName();
OffsetExpression offsetExpression = 
    record.getAreaSpecification().getOffsetExpression();
if (symbolicSubareaName != null) {
%>
         WITHIN AREA <%= areaName %> SUBAREA <%= symbolicSubareaName %>
<%
} else if (offsetExpression != null) { 
    String p;
    if (offsetExpression.getOffsetPageCount() != null) {
        p = offsetExpression.getOffsetPageCount() + " PAGES";
    } else if (offsetExpression.getOffsetPercent() != null) {
    	p = offsetExpression.getOffsetPercent() + " PERCENT";
    } else {
        p = "0";
    }
    String q;
    if (offsetExpression.getPercent() != null) {
        q = offsetExpression.getPercent() + " PERCENT";
    } else if (offsetExpression.getPageCount() != null) {
        q = offsetExpression.getPageCount() + " PAGES";
    } else {
        q = "100 PERCENT";
    }
%>
         WITHIN AREA <%= areaName %> OFFSET <%= p %> FOR <%= q %> 
<%
} else {
%>
         WITHIN AREA <%= areaName %>
<%
}
for (OwnerRole role : record.getOwnerRoles()) {
    String setName;
    if (role.getSet().getName().endsWith("_")) {
        setName = 
            role.getSet().getName().substring(0, role.getSet().getName().length() - 1);
    } else {
        setName = role.getSet().getName();
    }
%>         
*+       OWNER OF SET <%= setName %>
*+           NEXT DBKEY POSITION IS <%= role.getNextDbkeyPosition() %>
<%
    if (role.getPriorDbkeyPosition() != null) {
%>
*+           PRIOR DBKEY POSITION IS <%= role.getPriorDbkeyPosition() %>
<%
    }
}
List<String> setNames = new ArrayList<>();
for (MemberRole role : record.getMemberRoles()) {
	setNames.add(role.getSet().getName());
}
if (record.getSchema().getName().equals("IDMSNTWK") &&
    record.getSchema().getVersion() == 1 ||
    record.getSchema().getName().equals("EMPSCHM") &&
    record.getSchema().getVersion() == 100) {

    // only sort the "member of" comments for schemas other than IDMSNTWK 
    // version 1 and EMPSCHM version 100; not sure if we get away with this for
    // all schemas though    
	Collections.sort(setNames);
}
MemberRole[] memberRoles = new MemberRole[setNames.size()];
for (MemberRole role : record.getMemberRoles()) {
	int i = setNames.indexOf(role.getSet().getName());
	memberRoles[i] = role;
}
for (MemberRole role : memberRoles) {
    String setName;
    if (role.getSet().getName().endsWith("_")) {
        setName = 
            role.getSet().getName().substring(0, role.getSet().getName().length() - 1);
    } else {
        setName = role.getSet().getName();
    }
%>
*+       MEMBER OF SET <%= setName %>
<%
    if (role.getNextDbkeyPosition() != null) {
%>
*+           NEXT DBKEY POSITION IS <%= role.getNextDbkeyPosition() %>
<%
    }
    if (role.getPriorDbkeyPosition() != null) {
%>
*+           PRIOR DBKEY POSITION IS <%= role.getPriorDbkeyPosition() %>
<%
    }
    if (role.getIndexDbkeyPosition() != null) {
%>
*+           INDEX DBKEY POSITION IS <%= role.getIndexDbkeyPosition() %>
<%
    } else if (role.getSet().getSystemOwner() != null) {
%>
*+           INDEX DBKEY POSITION IS OMITTED
<%
    }
    if (role.getOwnerDbkeyPosition() != null) {
%>
*+           OWNER DBKEY POSITION IS <%= role.getOwnerDbkeyPosition() %>
<%
    }
}
%>
         .
<%
ElementTemplate elementTemplate = new ElementTemplate();
for (Element element : record.getElements()) {
    String syntax = elementTemplate.generate(element);
%>
<%= syntax %>         
<%    
}
%>