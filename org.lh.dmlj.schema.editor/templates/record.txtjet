<%@ jet package="org.lh.dmlj.schema.editor.template" imports="org.lh.dmlj.schema.*" class="RecordTemplate"%>
<%

/*
This template will generate a record's DDL syntax.  Currently these issues 
exist :

- The "SHARE STRUCTURE OF RECORD" clause will always show question marks as we 
  don't (yet) have this information available in the model.
- The order in which the "OWNER OF SET" clauses are generated is in most cases  
  the same as the order in the schema compiler's output.
- The order in which the "MEMBER OF SET" clauses are generated is (depending on
  the import tool used to create the schema) in many cases different from the 
  order in the schema compiler's output; this is a schema generation issue, we 
  are just following the model here.
- The "BIT LENGTH" clause for elements with USAGE IS BIT is not always correct
  (the MASK attribute is always generated as "MASK IS X'FF'"; for group fields
  (elements without a picture), a MASK attribute will NEVER be generated.
- The "VALUE" clause (e.g. for condition names) will always show a question mark
  as we don't (yet) have this information available in the model.
- The "ELEMENT LENGTH" and "POSITION" clauses can show a different value than 
  the schema compiler output; this has to do with the at times weird way the 
  schema compiler handles elements participating in an array ("OCCURS" clause).
- We will always show the real element (synonym) name whereas the schema 
  compiler output shows the base element name.
  
See RecordTemplateTest for a JUnit testcase.
*/

SchemaRecord record = (SchemaRecord)argument;
String recordName;
if (record.getName().endsWith("_")) {
	recordName = 
		record.getName().substring(0, record.getName().length() - 1);
} else {
	recordName = record.getName();
}
%>
     ADD
     RECORD NAME IS <%= recordName %>
         SHARE STRUCTURE OF RECORD ? VERSION ?
*+           SYNONYM OF PRIMARY RECORD ? VERSION ?         
         RECORD ID IS <%= record.getId() %>
<%
if (record.getLocationMode() == LocationMode.CALC) {
    StringBuilder keyElements = new StringBuilder();
    for (KeyElement keyElement : record.getCalcKey().getElements()) {
        if (keyElements.length() > 0) {
            keyElements.append(' ');
        }
        keyElements.append(keyElement.getElement().getName());
    }
%>
         LOCATION MODE IS CALC USING ( <%= keyElements.toString() %> )
             DUPLICATES ARE <%= record.getCalcKey().getDuplicatesOption().toString().replaceAll("_", " ") %>         
<%             
} else if (record.getLocationMode() == LocationMode.VIA) {
    String setName;
    if (record.getViaSpecification().getSet().getName().endsWith("_")) {
        setName = 
            record.getViaSpecification().getSet().getName().substring(0, record.getViaSpecification().getSet().getName().length() - 1);
    } else {
        setName =  record.getViaSpecification().getSet().getName();
    }
%>
         LOCATION MODE IS VIA <%= setName %> SET
<% 
    if (record.getViaSpecification().getSymbolicDisplacementName() != null) {
         String symbolicName = 
             record.getViaSpecification().getSymbolicDisplacementName();
%>
             DISPLACEMENT USING <%= symbolicName %>
<%             
    } else if (record.getViaSpecification().getDisplacementPageCount() != null) {
         short pages = 
             record.getViaSpecification().getDisplacementPageCount().shortValue();
%>
             DISPLACEMENT <%= pages %> PAGES
<%             
    }
} else {
%>
         LOCATION MODE IS DIRECT
<%
}
if (record.getMinimumRootLength() != null) {
%>
         MINIMUM ROOT LENGTH IS <%= record.getMinimumRootLength() %> CHARACTERS         
<%
}
if (record.getMinimumFragmentLength() != null) {
%>
         MINIMUM FRAGMENT LENGTH IS <%= record.getMinimumFragmentLength() %> CHARACTERS         
<%
}
for (RecordProcedureCallSpecification procedureCall : record.getProcedures()) {
%>
         CALL <%= procedureCall.getProcedure().getName() %> <%= procedureCall.getCallTime().toString() %> <%= procedureCall.getVerb().toString() %>
<%	
}
String areaName = record.getAreaSpecification().getArea().getName();
String symbolicSubareaName = 
    record.getAreaSpecification().getSymbolicSubareaName();
OffsetExpression offsetExpression = 
    record.getAreaSpecification().getOffsetExpression();
if (symbolicSubareaName != null) {
%>
         WITHIN AREA <%= areaName %> SUBAREA <%= symbolicSubareaName %>
<%
} else if (offsetExpression != null) { 
    String p;
    if (offsetExpression.getOffsetPageCount() != null) {
        p = offsetExpression.getOffsetPageCount() + " PAGES";
    } else if (offsetExpression.getOffsetPercent() != null) {
    	p = offsetExpression.getOffsetPercent() + " PERCENT";
    } else {
        p = "0";
    }
    String q;
    if (offsetExpression.getPercent() != null) {
        q = offsetExpression.getPercent() + " PERCENT";
    } else if (offsetExpression.getPageCount() != null) {
        q = offsetExpression.getPageCount() + " PAGES";
    } else {
        q = "100 PERCENT";
    }
%>
         WITHIN AREA <%= areaName %> OFFSET <%= p %> FOR <%= q %> 
<%
} else {
%>
         WITHIN AREA <%= areaName %> OFFSET 0 PERCENT FOR 100 PERCENT
<%
}
for (OwnerRole role : record.getOwnerRoles()) {
    String setName;
    if (role.getSet().getName().endsWith("_")) {
        setName = 
            role.getSet().getName().substring(0, role.getSet().getName().length() - 1);
    } else {
        setName = role.getSet().getName();
    }
%>         
*+       OWNER OF SET <%= setName %>
*+           NEXT DBKEY POSITION IS <%= role.getNextDbkeyPosition() %>
<%
    if (role.getPriorDbkeyPosition() != null) {
%>
*+           PRIOR DBKEY POSITION IS <%= role.getPriorDbkeyPosition() %>
<%
    }
}
for (MemberRole role : record.getMemberRoles()) {
    String setName;
    if (role.getSet().getName().endsWith("_")) {
        setName = 
            role.getSet().getName().substring(0, role.getSet().getName().length() - 1);
    } else {
        setName = role.getSet().getName();
    }
%>
*+       MEMBER OF SET <%= setName %>
<%
    if (role.getNextDbkeyPosition() != null) {
%>
*+           NEXT DBKEY POSITION IS <%= role.getNextDbkeyPosition() %>
<%
    }
    if (role.getPriorDbkeyPosition() != null) {
%>
*+           PRIOR DBKEY POSITION IS <%= role.getPriorDbkeyPosition() %>
<%
    }
    if (role.getIndexDbkeyPosition() != null) {
%>
*+           INDEX DBKEY POSITION IS <%= role.getIndexDbkeyPosition() %>
<%
    } else if (role.getSet().getSystemOwner() != null) {
%>
*+           INDEX DBKEY POSITION IS OMITTED
<%
    }
    if (role.getOwnerDbkeyPosition() != null) {
%>
*+           OWNER DBKEY POSITION IS <%= role.getOwnerDbkeyPosition() %>
<%
    }
}
%>
         .
<%
for (Element element : record.getElements()) {
    String left;
    if (element.getLevel() == 88) {
        left = "*+                   ";
    } else {
        StringBuilder p = new StringBuilder("*+   ");
        for (int i = element.getLevel(); i > 2; i--) {
            p.append("    ");
        }
        left = p.toString();
    }
    String level;
    if (element.getLevel() < 10) {
        level = "0" + element.getLevel();
    } else {
        level = String.valueOf(element.getLevel());
    }
%>
<%= left %><%= level %> <%= element.getName() %>
<%
    if (element.getRedefines() != null) {
%>
<%= left %>    REDEFINES <%= element.getRedefines().getName() %>
<%
    }
    if (element.getPicture() != null) {
%>
<%= left %>    PICTURE IS  <%= element.getPicture() %>
<%
    }
%>
<%= left %>    USAGE IS <%= Util.getUsageShortform(element.getUsage()) %> 
<%
    if (element.getUsage() != Usage.CONDITION_NAME &&
        element.getUsage() != Usage.BIT) {
%>
<%= left %>    ELEMENT LENGTH IS <%= element.getLength() %>
<%
    }
    if (element.getUsage() == Usage.BIT) {
        String bitLength;        
        if (element.getLength() == 1) {
            bitLength = "8 ";
        } else {
            bitLength = String.valueOf(element.getLength() * 8);
        }
        String mask;
        if (element.getPicture() != null) {
            mask = "MASK IS X'FF'";
        } else {
            mask = "";
        }
%>
<%= left %>    BIT LENGTH IS <%= bitLength %>    <%= mask %>
<%
    }
%>
<%= left %>    POSITION IS <%= element.getOffset() + 1 %>
<%
    if (element.getOccursSpecification() != null) {
        OccursSpecification occurs = element.getOccursSpecification();
        if (occurs.getDependingOn() != null) {
%>
<%= left %>    OCCURS 0 TO <%= occurs.getCount() %> TIMES DEPENDING ON <%= occurs.getDependingOn().getName() %>
<%  
        } else {
%>
<%= left %>    OCCURS <%= occurs.getCount() %> TIMES
<%
        }
    }
    if (element.getUsage() == Usage.CONDITION_NAME) {
%>
<%= left %>    VALUE IS ( ? )
<%
    }
%>
<%= left %>    .         
<%
}
%>